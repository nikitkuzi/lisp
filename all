;Определите функцию, возвращающую последний элемент списка.
(defun returnlast (list1)
	(print (last list1))
)
(returnlast '(1 2 3)) ; => (3)
(returnlast '(1 2 (3))) ; => ((3))
(returnlast '(1 2 ())) ; => (NIL)
(print '2_end)

;6. Определите функци, переводщу список чисел в список соответствующихим названий
; Не совсем понял, что необходимо делать в этом задании.
(defun fromNumsToNames (list1)
	(cond
 		(
 			(null list1) nil
 		)
 		(
 			(cons
 				(write-to-string (car list1))
 				(fromNumsToNames (cdr list1))
 			)
 		)
 	)
)
(print(fromNumsToNames '(1 2 3))) ; => ("1" "2" "3")
(print '6_end)

; Определите функцию, осуществляющую перестановку двух элементов списка с заданными номерами
(setf lstt '(1 2 3 4))
(defun swap (list1 pos1 pos2)
    (rotatef 
        (nth pos1 list1) 
        (nth pos2 list1)
    )
)
(swap lstt 0 3)
(print lstt)
(print '14_end)

;Определите функцию (ЛУКОВИЦА n), строящую N-уровневый вложенный список, элементом которого на самом глубоком уровне является N.
(defun solve (n n1)
	(if (not(= n 0)) 
		(list (solve (- n 1) n1))
		n1
	)
)
(defun Луковица (n)
	(solve n n)
)
(print (Луковица 5))
(print '19_end)

; Определите функцию, удаляющую из списка первое вхождение данного элемента на верхнем уровне.
(defun RemoveFirst(lst elem)
	(cond
		((equalp elem (car lst)) (append (cdr lst) nil))
		((null (car lst)) nil)
		(T
			(cons (car lst) (RemoveFirst (cdr lst) elem))
		)
	)
)

(print(RemoveFirst '(1 2 2 3 4 (5)) 10))
(print(RemoveFirst '(1 2 2 3 4 (5)) 2))
(print(RemoveFirst '(1 2 2 3 4 (5) (5) ((1))) '(5)))

(print '21_end)

; Определите функции, преобразующие список (a b с) к виду (а (b (с))) и наоборот.
(defun transformToOneList (lst)
	(cond
		((null lst); last element
			nil
		)
		((atom (car lst)); if there are no nested lists just add
			(cons (car lst) (transformToOneList (cdr lst)))
		)
		(T; if there are we have to remove them
			(append (transformToOneList (car lst)) (transformToOneList (cdr lst)))
		)
	)
)


(defun transformToNestedList (lst)
	(cond
		((null (cdr lst)); to prevent adding nil to the end
			lst
		)
		(T; just loop through the list adding to the end
			(list (car lst) (transformToNestedList (cdr lst)))
		)
	)
)

(print (transformToOneList '(1 2 3 ((5)) (4))))
(print (transformToNestedList '(1 2 3)))
(print '23_end)

; Определите предикат РАВЕНСТВО-МНОЖЕСТВ, проверяющий совпадение двух мно-
; жеств (независимо от порядка следования элементов). Подсказка: напишите
; функцию УДАЛИТЬ, удаляющую данный элемент из множества
(defun RemoveFirst(lst elem)
	(cond
		((equalp elem (car lst)) (append (cdr lst) nil))
		((null (car lst)) nil)
		(T
			(cons (car lst) (RemoveFirst (cdr lst) elem))
		)
	)
)

(defun equalSet (lst1 lst2)
	(cond
		((null lst1)
			(cond
				((null lst2); if the first list is empty and so is the second then the are equal
					T
				)
				(T; else not
					nil
				)
			)
		)
		((null lst2); if the second one is empty then this means that the first condition was false
			nil
		)
		(T
			(equalSet (RemoveFirst lst2 (car lst1)) (RemoveFirst lst1 (car lst1)))
		)
	)
)

(print(equalSet '(1 2 3) '(1 3 2)))
(print(equalSet '(1) '(2)))
(print '34_end)


; Определите функцию РАЗНОСТЬ, формирующую разность двух множеств, т.е.
; удаляющую из первого множества все общие со вторым множеством элементы.
(defun RemoveAll(lst elem)
	(cond
		((equalp elem (car lst)) (append (RemoveAll (cdr lst) elem)nil))
		((null (car lst)) nil)
		(T
			(cons (car lst) (RemoveAll (cdr lst) elem))
		)
	)
)
(defun Subtraction(lst1 lst2)
	(cond
		((null (car lst1)) lst1)
		((null (car lst2)) lst1)
		(T
			(Subtraction (RemoveAll lst1 (car lst2)) (cdr lst2))
		)
	)
)

(print(Subtraction '(1 (2) 3) '(1 (2) 3) ))
(print(Subtraction '(1 (2) 3) '(1 (2)) ))
(print(Subtraction '(1 (2) 3) '(1 3)))
(print '40_end)

; Определите функцию, подсчитывающую количество всех вершин данного дерева заданной высоты.
(defun solve (lst n)
		(cond 
			((= n 0) 0)
			(T
				(+ 
					(if (atom (car lst))
						1
						(solve (car lst) (- n 1))
					)
					(if (atom (cdr lst))
						0
						(solve (cdr lst) n)
					)
				)
			)
		)
)

(setq tree '(1 
				(2 
					(3) (4) (5) (6)
				) 
				(7 
					(8) (9 10) (11
									(12)
								)
				)
			)
)
(setq tree1 '(1 
				(2 
					(3) (4) (5) (6)
				) 
				(7 
				)
			)
)
(setq tree2 '(1 
				(2 
					(3) (4) (5) (6)
				) 
			)
)
(print (solve tree 4)); tree, depth
(print (solve tree1 3))
(print (solve tree2 3))
(print '43_end)

;Предположим, что отец и мать некоторого лица, хранятся как значения 
;соответствующих свойств у символа, обозначазщего это лицо. Напишите функцию 
;РОДИТЕЛИ x), которая возвращает в качестве значения родителей, и предикат 
;(СЕСТРЫ-БРАТЬЯ x1 x2), который истинен в случае, если x1 и x2  сестры или 
;братья, родные или с одним общим родителем.
(defun setParent(child father mother)
	(setf (get child 'father) father)
	(setf (get child 'mother) mother)
)
(defun getParent (child)
	(list
		(get child 'father)
		(get child  'mother)
	)
)
(defun siblings(child1 child2)
	(cond
		((equalp (getParent child1) (getParent child2))
			T
		)
		((equalp (car (getParent child1)) (car (getParent child2)))
			T
		)
		((equalp (cdr (getParent child1)) (cdr (getParent child2)))
			T
		)
		(T
			nil
		)
	)
)
(setParent 'x 'z 'y)
(setParent 'xx 'm 'n)
(print (getParent 'x))
(print (siblings 'x 'xx))
(print '46_end)

; Определите FUNCALL через функционал APPLY.
(defun func (function &rest arguments)
	(apply function arguments)
)
(print (func '* 1 2 3 4 5))
(print '1_high_end)

;Определите функционал (APL-APPLY f x), который применяет каждую функцию fi списка
;(f1 f2 ... fn)
;к соответствующему элементу списка
;x = (x1 x2 ... xn)
;и возвращает список, сформированный из результатов.

(defun power(n)
	(* n n)
)
(defun increase(n)
	(+ n 1)
)
(defun duplicate(n)
	(list n n)
)
(defun apl-apply(f x)
	(cond
		((not (null x))
			(cons 
				(funcall (car f) (car x))
				(apl-apply (cdr f) (cdr x))
			)
		)
	)
)
(print (apl-apply '(power increase duplicate) '(10 10 10)))
(print '3_high_end)

; Определите функциональный предикат (НЕКОТОРЫй пред список), 
;который истинен, когда, являющейся функциональным аргументом 
;предикат пред истинен хотя бы для одного элемента списка список.
(defun negative(elem)
	(if (numberp elem)
		(cond
			((< elem 0)	T)
			(T nil)
		)
	)
)
(defun func(fn lst)
	(reduce #'(lambda (x y) (or x y)) (mapcar fn lst))
)
(print(func 'negative '(1 2 -3)))
(print '5_high_end)

;Определите фильтр (УДАЛИТЬ-ЕСЛИ-НЕ пред список), удаляющий из списка список
;все элементы, которые не обладают свойством, наличие которого проверяет
;предикат пред.

(defun negative(elem)
	(if (numberp elem)
		(cond
			((< elem 0)	T)
			(T nil)
		)
	)
)
(defun deleteIfNot(fn lst)
	(print (mapcan #'(lambda (x) (if (funcall fn x) (list x) nil)) lst))
)
(deleteIfNot 'negative '(1 -2 -3))
(print '7_high_end)

;Напишите генератор порождения чисел Фибоначчи: 0, 1, 1, 2, 3, 5,
(defun fib()
	(let 
		((a 0) (b 1))
 		(lambda () 
 			(setq a (+ a b))
 			(setq b (- a b))
		)
 	) 
)
(setq nextFib (fib))
(setq nextFib1 (fib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib))
(print (funcall nextFib1))
(print (funcall nextFi1))
(print (funcall nextFi1))
(print '9_high_end)

; Определите фукнционал МНОГОФУН, который использует функции, являющиеся
; аргументами, по следующей схеме:
; (МНОГОФУН ’(f g ... h) x) ⇔ (LIST (f x) (g x) ... (h x)).
(defun power(n)
	(* n n)
)
(defun increase(n)
	(+ n 1)
)
(defun duplicate(n)
	(list n n)
)
(defun multifun (fn n)
	(mapcar #'(lambda (x) (list x (funcall x n))) fn)
)
(print (multifun '(power increase duplicate power) 10))
(print '11_high_end)
